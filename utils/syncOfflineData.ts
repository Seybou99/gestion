// Utilitaire pour synchroniser les donn√©es cr√©√©es en mode offline
import { databaseService } from '../services/DatabaseService';

export const syncOfflineArticles = async () => {
  try {
    console.log('üîÑ [SYNC] Recherche d\'articles en attente de synchronisation...');
    
    // R√©cup√©rer tous les articles avec sync_status = 'pending'
    const products = await databaseService.getAll('products');
    const pendingProducts = products.filter((product: any) => product.sync_status === 'pending');
    
    console.log(`üì¶ [SYNC] Trouv√© ${pendingProducts.length} articles en attente de synchronisation`);
    
    if (pendingProducts.length === 0) {
      console.log('‚úÖ [SYNC] Aucun article en attente de synchronisation');
      return;
    }
    
    // Ajouter chaque article √† la queue de synchronisation
    for (const product of pendingProducts) {
      try {
        // V√©rifier si l'article est d√©j√† dans la queue
        const existingQueue = await databaseService.getAll('sync_queue');
        const alreadyInQueue = existingQueue.some((item: any) => 
          item.table_name === 'products' && 
          item.record_id === product.id && 
          item.operation === 'create' &&
          item.status === 'pending'
        );
        
        if (!alreadyInQueue) {
          console.log(`üîÑ [SYNC] Ajout de l'article "${product.name}" √† la queue de synchronisation`);
          
          await databaseService.insert('sync_queue', {
            table_name: 'products',
            record_id: product.id,
            operation: 'create',
            data: JSON.stringify({
              name: product.name,
              description: product.description,
              sku: product.sku,
              barcode: product.barcode,
              category_id: product.category_id,
              price_buy: product.price_buy,
              price_sell: product.price_sell,
              margin: product.margin,
              unit: product.unit,
              images: product.images,
              is_active: product.is_active,
            }),
            priority: 1,
            status: 'pending',
            retry_count: 0,
            created_at: new Date().toISOString(),
          });
          
          console.log(`‚úÖ [SYNC] Article "${product.name}" ajout√© √† la queue`);
        } else {
          console.log(`‚è≠Ô∏è [SYNC] Article "${product.name}" d√©j√† dans la queue`);
        }
      } catch (error) {
        console.error(`‚ùå [SYNC] Erreur ajout article "${product.name}":`, error);
      }
    }
    
    console.log('‚úÖ [SYNC] Synchronisation des articles offline termin√©e');
    
  } catch (error) {
    console.error('‚ùå [SYNC] Erreur synchronisation articles offline:', error);
  }
};

// Fonction pour forcer la synchronisation de tous les articles pending
export const forceSyncAllPendingArticles = async () => {
  try {
    console.log('üîÑ [FORCE SYNC] Recherche de tous les articles pending...');
    
    // R√©cup√©rer tous les articles avec sync_status = 'pending'
    const products = await databaseService.getAll('products');
    const pendingProducts = products.filter((product: any) => product.sync_status === 'pending');
    
    console.log(`üì¶ [FORCE SYNC] Trouv√© ${pendingProducts.length} articles pending`);
    
    if (pendingProducts.length === 0) {
      console.log('‚úÖ [FORCE SYNC] Aucun article pending trouv√©');
      return;
    }
    
    // Forcer l'ajout √† la queue (m√™me s'ils y sont d√©j√†)
    for (const product of pendingProducts) {
      try {
        console.log(`üîÑ [FORCE SYNC] Ajout forc√© de l'article "${product.name}" √† la queue`);
        
        await databaseService.insert('sync_queue', {
          table_name: 'products',
          record_id: product.id,
          operation: 'create',
          data: JSON.stringify({
            name: product.name,
            description: product.description,
            sku: product.sku,
            barcode: product.barcode,
            category_id: product.category_id,
            price_buy: product.price_buy,
            price_sell: product.price_sell,
            margin: product.margin,
            unit: product.unit,
            images: product.images,
            is_active: product.is_active,
          }),
          priority: 1,
          status: 'pending',
          retry_count: 0,
          created_at: new Date().toISOString(),
        });
        
        console.log(`‚úÖ [FORCE SYNC] Article "${product.name}" ajout√© √† la queue`);
      } catch (error) {
        console.error(`‚ùå [FORCE SYNC] Erreur ajout article "${product.name}":`, error);
      }
    }
    
    console.log('‚úÖ [FORCE SYNC] Ajout forc√© termin√©');
    
  } catch (error) {
    console.error('‚ùå [FORCE SYNC] Erreur ajout forc√©:', error);
  }
};
