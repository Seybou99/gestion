// Utilitaire pour v√©rifier et corriger la synchronisation Firebase
import { databaseService } from '../services/DatabaseService';
import { firebaseService } from '../services/FirebaseService';

export const checkAndFixFirebaseSync = async () => {
  try {
    console.log('üîç [FIREBASE CHECK] V√©rification de la synchronisation Firebase...');
    
    // 1. R√©cup√©rer tous les produits locaux
    const localProducts = await databaseService.getAll('products');
    console.log(`üì¶ [FIREBASE CHECK] Produits locaux: ${localProducts.length}`);
    
    // 2. R√©cup√©rer tous les produits Firebase
    const firebaseProducts = await firebaseService.getProducts();
    console.log(`üåê [FIREBASE CHECK] Produits Firebase: ${firebaseProducts.length}`);
    
    // 3. Identifier les produits manquants dans Firebase
    const localIds = new Set(localProducts.map((p: any) => p.id));
    const firebaseIds = new Set(firebaseProducts.map((p: any) => p.id));
    
    const missingInFirebase = localProducts.filter((product: any) => 
      !firebaseIds.has(product.id) && product.sync_status === 'synced'
    );
    
    console.log(`‚ùå [FIREBASE CHECK] Produits manquants dans Firebase: ${missingInFirebase.length}`);
    
    if (missingInFirebase.length === 0) {
      console.log('‚úÖ [FIREBASE CHECK] Tous les produits sont bien dans Firebase !');
      return {
        local: localProducts.length,
        firebase: firebaseProducts.length,
        missing: 0,
        fixed: 0
      };
    }
    
    // 4. Corriger les produits manquants
    console.log('üîß [FIREBASE CHECK] Correction des produits manquants...');
    let fixedCount = 0;
    
    for (const product of missingInFirebase) {
      try {
        console.log(`üîÑ [FIREBASE CHECK] Cr√©ation dans Firebase: "${product.name}"`);
        
        // Cr√©er le produit dans Firebase
        const firebaseId = await firebaseService.createProduct({
          name: product.name,
          description: product.description,
          sku: product.sku,
          barcode: product.barcode,
          category_id: product.category_id,
          price_buy: product.price_buy,
          price_sell: product.price_sell,
          margin: product.margin,
          unit: product.unit,
          images: product.images,
          is_active: product.is_active,
        });
        
        // Mettre √† jour le produit local avec l'ID Firebase
        await databaseService.update('products', product.id, {
          firebase_id: firebaseId,
          sync_status: 'synced'
        });
        
        console.log(`‚úÖ [FIREBASE CHECK] "${product.name}" cr√©√© dans Firebase: ${firebaseId}`);
        fixedCount++;
        
      } catch (error) {
        console.error(`‚ùå [FIREBASE CHECK] Erreur cr√©ation "${product.name}":`, error);
      }
    }
    
    // 5. V√©rification finale
    const finalFirebaseProducts = await firebaseService.getProducts();
    
    console.log('üìä [FIREBASE CHECK] R√©sum√© final:');
    console.log(`   üì¶ Produits locaux: ${localProducts.length}`);
    console.log(`   üåê Produits Firebase: ${finalFirebaseProducts.length}`);
    console.log(`   ‚ùå Produits manquants: ${missingInFirebase.length}`);
    console.log(`   ‚úÖ Produits corrig√©s: ${fixedCount}`);
    
    return {
      local: localProducts.length,
      firebase: finalFirebaseProducts.length,
      missing: missingInFirebase.length,
      fixed: fixedCount
    };
    
  } catch (error) {
    console.error('‚ùå [FIREBASE CHECK] Erreur v√©rification Firebase:', error);
    throw error;
  }
};
