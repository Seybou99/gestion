// Utilitaire pour synchroniser Firebase ‚Üí AsyncStorage
import AsyncStorage from '@react-native-async-storage/async-storage';
import { databaseService } from '../services/DatabaseService';
import { firebaseService } from '../services/FirebaseService';

/**
 * T√©l√©charger toutes les cat√©gories depuis Firebase
 * et les sauvegarder dans AsyncStorage local
 * Protection contre les doublons incluse
 */
export const syncCategoriesToLocal = async () => {
  try {
    console.log('üì• [SYNC CATEGORIES] D√©but du t√©l√©chargement des cat√©gories Firebase ‚Üí Local...');

    // 1. R√©cup√©rer les cat√©gories depuis Firebase
    const firebaseCategories = await firebaseService.getCategories();
    console.log(`üìÇ [SYNC CATEGORIES] ${firebaseCategories.length} cat√©gories trouv√©es dans Firebase`);

    // 2. R√©cup√©rer les cat√©gories existantes localement
    const localCategories = await databaseService.getAll('categories') as any[];
    
    // 3. Cr√©er un Map des cat√©gories locales par firebase_id et id local
    const localCategoriesByFirebaseId = new Map();
    const localCategoriesById = new Map();
    
    localCategories.forEach(cat => {
      if (cat.firebase_id) {
        localCategoriesByFirebaseId.set(cat.firebase_id, cat);
      }
      localCategoriesById.set(cat.id, cat);
    });
    
    console.log(`üìÇ [SYNC CATEGORIES] ${localCategories.length} cat√©gories locales existantes`);
    
    // 4. Sauvegarder chaque cat√©gorie Firebase localement
    let categoriesAdded = 0;
    let categoriesUpdated = 0;
    let categoriesSkipped = 0;
    
    for (const firebaseCategory of firebaseCategories) {
      try {
        // V√©rifier si la cat√©gorie existe d√©j√† localement (par firebase_id ou id)
        const existingByFirebaseId = localCategoriesByFirebaseId.get(firebaseCategory.id);
        const existingById = localCategoriesById.get(firebaseCategory.id);
        
        if (existingByFirebaseId || existingById) {
          // La cat√©gorie existe d√©j√†
          const existing = existingByFirebaseId || existingById;
          
          // Si la cat√©gorie locale est en attente de sync, ne pas l'√©craser
          if (existing.sync_status === 'pending') {
            console.log(`‚è≠Ô∏è [SYNC CATEGORIES] Cat√©gorie "${firebaseCategory.name}" en attente de sync, non √©cras√©e`);
            categoriesSkipped++;
            continue;
          }
          
          // Mettre √† jour la cat√©gorie locale avec les donn√©es Firebase
          await databaseService.update('categories', existing.id, {
            name: firebaseCategory.name,
            description: firebaseCategory.description,
            color: firebaseCategory.color,
            icon: firebaseCategory.icon,
            is_active: firebaseCategory.is_active,
            firebase_id: firebaseCategory.id,
            updated_at: firebaseCategory.updated_at || new Date().toISOString(),
            sync_status: 'synced',
          });
          console.log(`üîÑ [SYNC CATEGORIES] Cat√©gorie "${firebaseCategory.name}" mise √† jour`);
          categoriesUpdated++;
        } else {
          // Nouvelle cat√©gorie, l'ajouter localement
          const existing = await AsyncStorage.getItem('categories');
          const items = existing ? JSON.parse(existing) : [];
          
          // V√©rifier une derni√®re fois les doublons par nom
          const duplicateByName = items.find((cat: any) => 
            cat.name.toLowerCase().trim() === firebaseCategory.name.toLowerCase().trim()
          );
          
          if (duplicateByName) {
            // Mettre √† jour le doublon existant avec l'ID Firebase
            await databaseService.update('categories', duplicateByName.id, {
              firebase_id: firebaseCategory.id,
              sync_status: 'synced',
              updated_at: firebaseCategory.updated_at || new Date().toISOString(),
            });
            console.log(`üîó [SYNC CATEGORIES] Cat√©gorie "${firebaseCategory.name}" li√©e √† Firebase ID`);
            categoriesUpdated++;
          } else {
            // Cr√©er la nouvelle cat√©gorie avec l'ID Firebase comme ID local
            items.push({
              id: firebaseCategory.id, // Utiliser l'ID Firebase comme ID local
              name: firebaseCategory.name,
              description: firebaseCategory.description,
              color: firebaseCategory.color,
              icon: firebaseCategory.icon,
              is_active: firebaseCategory.is_active,
              firebase_id: firebaseCategory.id,
              created_at: firebaseCategory.created_at || new Date().toISOString(),
              updated_at: firebaseCategory.updated_at || new Date().toISOString(),
              sync_status: 'synced',
            });
            await AsyncStorage.setItem('categories', JSON.stringify(items));
            
            // Invalider le cache
            databaseService.invalidateCache('categories');
            
            console.log(`‚úÖ [SYNC CATEGORIES] Cat√©gorie "${firebaseCategory.name}" t√©l√©charg√©e`);
            categoriesAdded++;
          }
        }
      } catch (error) {
        console.error(`‚ùå [SYNC CATEGORIES] Erreur cat√©gorie "${firebaseCategory.name}":`, error);
      }
    }

    console.log('‚úÖ [SYNC CATEGORIES] T√©l√©chargement des cat√©gories termin√© !');
    console.log(`üìä [SYNC CATEGORIES] Ajout√©es: ${categoriesAdded}, Mises √† jour: ${categoriesUpdated}, Ignor√©es: ${categoriesSkipped}`);
    
    return {
      categoriesAdded,
      categoriesUpdated,
      categoriesSkipped,
      totalCategories: firebaseCategories.length,
    };
  } catch (error) {
    console.error('‚ùå [SYNC CATEGORIES] Erreur g√©n√©rale:', error);
    throw error;
  }
};

/**
 * T√©l√©charger tous les produits et stocks depuis Firebase
 * et les sauvegarder dans AsyncStorage local
 */
export const syncFirebaseToLocal = async () => {
  try {
    console.log('üì• [SYNC DOWNLOAD] D√©but du t√©l√©chargement Firebase ‚Üí Local...');

    // 1. Synchroniser les cat√©gories EN PREMIER (car les produits en d√©pendent)
    let categoriesResult = {
      categoriesAdded: 0,
      categoriesUpdated: 0,
      categoriesSkipped: 0,
      totalCategories: 0,
    };
    
    try {
      categoriesResult = await syncCategoriesToLocal();
    } catch (error) {
      console.error('‚ùå [SYNC DOWNLOAD] Erreur sync cat√©gories:', error);
      // Continuer m√™me si les cat√©gories √©chouent
    }

    // 2. R√©cup√©rer les produits depuis Firebase
    const firebaseProducts = await firebaseService.getProducts();
    console.log(`üì¶ [SYNC DOWNLOAD] ${firebaseProducts.length} produits trouv√©s dans Firebase`);

    // 3. R√©cup√©rer les stocks depuis Firebase
    const firebaseStocks = await firebaseService.getStock();
    console.log(`üìä [SYNC DOWNLOAD] ${firebaseStocks.length} stocks trouv√©s dans Firebase`);

    // 4. R√©cup√©rer les produits existants localement
    const localProducts = await databaseService.getAll('products');
    const localProductIds = new Set(localProducts.map(p => p.id));
    
    // 5. Sauvegarder chaque produit localement
    let productsAdded = 0;
    for (const product of firebaseProducts) {
      try {
        if (!localProductIds.has(product.id)) {
          // Cr√©er le produit localement
          await databaseService.insert('products', {
            ...product,
            created_at: product.created_at,
            updated_at: product.updated_at,
            sync_status: 'synced',
          });
          console.log(`‚úÖ [SYNC DOWNLOAD] Produit "${product.name}" t√©l√©charg√©`);
          productsAdded++;
        } else {
          console.log(`‚è≠Ô∏è [SYNC DOWNLOAD] Produit "${product.name}" existe d√©j√†`);
        }
      } catch (error) {
        console.error(`‚ùå [SYNC DOWNLOAD] Erreur produit "${product.name}":`, error);
      }
    }

    // 6. R√©cup√©rer les stocks existants localement
    const localStocks = await databaseService.getAll('stock');
    const localStockIds = new Set(localStocks.map(s => s.id));
    
    // 7. Sauvegarder chaque stock localement
    let stocksAdded = 0;
    for (const stock of firebaseStocks) {
      try {
        if (!localStockIds.has(stock.id)) {
          // Cr√©er le stock localement
          await databaseService.insert('stock', {
            ...stock,
            created_at: stock.created_at,
            updated_at: stock.updated_at,
            sync_status: 'synced',
          });
          console.log(`‚úÖ [SYNC DOWNLOAD] Stock pour produit "${stock.product_id}" t√©l√©charg√©`);
          stocksAdded++;
        } else {
          console.log(`‚è≠Ô∏è [SYNC DOWNLOAD] Stock pour produit "${stock.product_id}" existe d√©j√†`);
        }
      } catch (error) {
        console.error(`‚ùå [SYNC DOWNLOAD] Erreur stock "${stock.product_id}":`, error);
      }
    }

    console.log('‚úÖ [SYNC DOWNLOAD] T√©l√©chargement Firebase ‚Üí Local termin√© !');
    return {
      categoriesAdded: categoriesResult.categoriesAdded,
      categoriesUpdated: categoriesResult.categoriesUpdated,
      categoriesSkipped: categoriesResult.categoriesSkipped,
      totalCategories: categoriesResult.totalCategories,
      productsDownloaded: productsAdded,
      stocksDownloaded: stocksAdded,
      totalProducts: firebaseProducts.length,
      totalStocks: firebaseStocks.length,
    };
  } catch (error) {
    console.error('‚ùå [SYNC DOWNLOAD] Erreur g√©n√©rale:', error);
    throw error;
  }
};

