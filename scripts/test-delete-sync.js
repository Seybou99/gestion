#!/usr/bin/env node

/**
 * Script de test pour v√©rifier la synchronisation de suppression avec Firebase
 * 
 * Ce script simule le processus complet :
 * 1. Cr√©ation d'un produit (local + Firebase)
 * 2. V√©rification que firebase_id est sauvegard√©
 * 3. Suppression du produit
 * 4. V√©rification que la suppression est synchronis√©e avec Firebase
 */

const { databaseService } = require('../services/DatabaseService');
const { firebaseService } = require('../services/FirebaseService');
const { handleOfflineDelete } = require('../utils/offlineDeleteHandler');
const { isValidFirebaseId } = require('../utils/firebaseIdMapper');

// Configuration
const TEST_PRODUCT = {
  name: `Test Product ${Date.now()}`,
  description: 'Produit de test pour v√©rifier la synchronisation',
  sku: `TEST-${Date.now().toString().slice(-6)}`,
  barcode: undefined,
  category_id: 'test-category',
  price_buy: 10,
  price_sell: 20,
  margin: 10,
  unit: 'pcs',
  images: undefined,
  is_active: true,
  sync_status: 'pending',
  created_at: new Date().toISOString(),
  updated_at: new Date().toISOString(),
};

async function testDeleteSync() {
  console.log('üß™ [TEST] D√©marrage du test de synchronisation de suppression');
  console.log('=' .repeat(60));

  try {
    // √âtape 1: Cr√©er un produit local
    console.log('\nüìù √âtape 1: Cr√©ation d\'un produit local');
    const localId = await databaseService.insert('products', TEST_PRODUCT);
    console.log(`‚úÖ Produit cr√©√© localement avec ID: ${localId}`);

    // √âtape 2: Synchroniser avec Firebase
    console.log('\nüîÑ √âtape 2: Synchronisation avec Firebase');
    let firebaseId;
    try {
      firebaseId = await firebaseService.createProduct(TEST_PRODUCT);
      console.log(`‚úÖ Produit cr√©√© dans Firebase avec ID: ${firebaseId}`);
      
      // Mettre √† jour le produit local avec le firebase_id
      await databaseService.update('products', localId, {
        sync_status: 'synced',
        firebase_id: firebaseId
      });
      console.log(`‚úÖ firebase_id sauvegard√© localement: ${firebaseId}`);
    } catch (error) {
      console.log(`‚ö†Ô∏è Erreur Firebase (normal en d√©veloppement): ${error.message}`);
      console.log('üìù Le produit reste local avec sync_status: pending');
    }

    // √âtape 3: V√©rifier l'√©tat avant suppression
    console.log('\nüîç √âtape 3: V√©rification de l\'√©tat avant suppression');
    const productBeforeDelete = await databaseService.getById('products', localId);
    console.log('üì¶ Produit avant suppression:', {
      id: productBeforeDelete.id,
      name: productBeforeDelete.name,
      firebase_id: productBeforeDelete.firebase_id,
      sync_status: productBeforeDelete.sync_status,
      hasFirebaseId: !!productBeforeDelete.firebase_id,
      isValidFirebaseId: productBeforeDelete.firebase_id ? isValidFirebaseId(productBeforeDelete.firebase_id) : false
    });

    // √âtape 4: Supprimer le produit
    console.log('\nüóëÔ∏è √âtape 4: Suppression du produit');
    const deleteSuccess = await handleOfflineDelete(localId);
    console.log(`‚úÖ Suppression ${deleteSuccess ? 'r√©ussie' : '√©chou√©e'}`);

    // √âtape 5: V√©rifier l'√©tat apr√®s suppression
    console.log('\nüîç √âtape 5: V√©rification de l\'√©tat apr√®s suppression');
    try {
      const productAfterDelete = await databaseService.getById('products', localId);
      console.log('‚ùå ERREUR: Le produit existe encore localement:', productAfterDelete);
    } catch (error) {
      console.log('‚úÖ Produit supprim√© localement (erreur attendue)');
    }

    // √âtape 6: V√©rifier Firebase (si applicable)
    if (firebaseId && isValidFirebaseId(firebaseId)) {
      console.log('\nüîç √âtape 6: V√©rification de la suppression Firebase');
      try {
        const firebaseProduct = await firebaseService.getProductById(firebaseId);
        if (firebaseProduct) {
          console.log('‚ùå ERREUR: Le produit existe encore dans Firebase');
        } else {
          console.log('‚úÖ Produit supprim√© de Firebase');
        }
      } catch (error) {
        console.log('‚úÖ Produit supprim√© de Firebase (erreur attendue)');
      }
    } else {
      console.log('\nüîç √âtape 6: Pas de v√©rification Firebase (pas de firebase_id valide)');
    }

    // √âtape 7: V√©rifier la queue de synchronisation
    console.log('\nüîç √âtape 7: V√©rification de la queue de synchronisation');
    const syncQueue = await databaseService.getAll('sync_queue');
    const deleteOperations = syncQueue.filter(op => 
      op.table_name === 'products' && 
      op.operation === 'delete' && 
      (op.record_id === localId || op.record_id === firebaseId)
    );
    
    if (deleteOperations.length > 0) {
      console.log(`üìù ${deleteOperations.length} op√©ration(s) de suppression en attente:`, deleteOperations.map(op => ({
        id: op.id,
        record_id: op.record_id,
        status: op.status,
        retry_count: op.retry_count
      })));
    } else {
      console.log('‚úÖ Aucune op√©ration de suppression en attente');
    }

    console.log('\n' + '='.repeat(60));
    console.log('üéâ Test termin√© avec succ√®s !');
    
    // R√©sum√©
    console.log('\nüìä R√âSUM√â:');
    console.log(`- Produit cr√©√© localement: ${localId}`);
    console.log(`- Firebase ID: ${firebaseId || 'Non cr√©√©'}`);
    console.log(`- Suppression locale: ${deleteSuccess ? '‚úÖ' : '‚ùå'}`);
    console.log(`- Suppression Firebase: ${firebaseId ? '‚úÖ' : 'N/A'}`);
    console.log(`- Op√©rations en attente: ${deleteOperations.length}`);

  } catch (error) {
    console.error('\n‚ùå ERREUR lors du test:', error);
    console.error('Stack trace:', error.stack);
  }
}

// Fonction utilitaire pour nettoyer apr√®s le test
async function cleanup() {
  console.log('\nüßπ Nettoyage apr√®s test...');
  try {
    // Supprimer tous les produits de test
    const products = await databaseService.getAll('products');
    const testProducts = products.filter(p => p.name.includes('Test Product'));
    
    for (const product of testProducts) {
      await databaseService.delete('products', product.id);
      console.log(`üóëÔ∏è Produit de test supprim√©: ${product.name}`);
    }

    // Supprimer les op√©rations de test de la queue
    const syncQueue = await databaseService.getAll('sync_queue');
    const testOperations = syncQueue.filter(op => 
      op.table_name === 'products' && 
      op.operation === 'delete' &&
      op.data && JSON.parse(op.data).name?.includes('Test Product')
    );
    
    for (const operation of testOperations) {
      await databaseService.delete('sync_queue', operation.id);
      console.log(`üóëÔ∏è Op√©ration de test supprim√©e: ${operation.id}`);
    }

    console.log('‚úÖ Nettoyage termin√©');
  } catch (error) {
    console.error('‚ùå Erreur lors du nettoyage:', error);
  }
}

// Ex√©cution du test
if (require.main === module) {
  testDeleteSync()
    .then(() => cleanup())
    .then(() => {
      console.log('\nüèÅ Test termin√©, nettoyage effectu√©');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Erreur fatale:', error);
      process.exit(1);
    });
}

module.exports = { testDeleteSync, cleanup };
