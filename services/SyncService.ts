import AsyncStorage from '@react-native-async-storage/async-storage';
import { store } from '../store';
import { fetchCategories } from '../store/slices/categorySlice';
import {
    addSyncError,
    setLastSync,
    setPendingOperations,
    setSyncInProgress
} from '../store/slices/syncSlice';
import { getFirebaseId, isValidFirebaseId } from '../utils/firebaseIdMapper';
import { syncCategoriesToLocal } from '../utils/syncFirebaseToLocal';
import { databaseService, SyncOperation } from './DatabaseService';
import { firebaseService } from './FirebaseService';

interface SyncConfig {
  maxRetries: number;
  retryDelay: number;
  batchSize: number;
  syncInterval: number;
}

class SyncService {
  private config: SyncConfig = {
    maxRetries: 3,
    retryDelay: 5000, // 5 secondes
    batchSize: 10,
    syncInterval: 5 * 60 * 1000, // 5 minutes
  };

  private syncInProgress = false;
  private syncInterval: any = null;
  private isInitialized = false;

  constructor() {
    this.init();
  }

  // Initialiser le service de synchronisation
  async init() {
    if (this.isInitialized) return;

    try {
      // √âcouter les changements de r√©seau
      this.setupNetworkListener();
      
      // D√©marrer la synchronisation p√©riodique
      this.startPeriodicSync();
      
      this.isInitialized = true;
      console.log('üîÑ Service de synchronisation initialis√©');
    } catch (error) {
      console.error('‚ùå Erreur initialisation service de sync:', error);
    }
  }

  // √âcouter les changements de connectivit√©
  private setupNetworkListener() {
    // Pour React Native, on √©coute directement les changements du store Redux
    // au lieu des √©v√©nements DOM
    console.log('üîÑ √âcoute des changements r√©seau configur√©e');
  }

  // D√©marrer la synchronisation p√©riodique
  private startPeriodicSync() {
    this.syncInterval = setInterval(() => {
      const state = store.getState();
      const networkState = state.network as any;
      if (networkState.isConnected && !this.syncInProgress) {
        this.startSync();
      }
    }, this.config.syncInterval);
  }

  // D√©marrer la synchronisation
  async startSync() {
    if (this.syncInProgress) {
      console.log('üîÑ Synchronisation d√©j√† en cours');
      return;
    }

    const state = store.getState();
    const networkState = state.network as any;
    if (!networkState.isConnected) {
      console.log('üåê Pas de connexion - Synchronisation report√©e');
      return;
    }

    this.syncInProgress = true;
    store.dispatch(setSyncInProgress(true));

    // console.log('üîÑ D√©marrage de la synchronisation...');
    
    // R√©initialiser les op√©rations en erreur au d√©but de chaque synchronisation
    await this.resetErrorOperations();

    try {
      // 1. R√©cup√©rer les donn√©es du serveur
      await this.pullFromServer();
      
      // 2. Envoyer les modifications locales
      await this.pushToServer();
      
      // 3. Mettre √† jour le timestamp de derni√®re sync
      await databaseService.updateLastSyncTimestamp();
      store.dispatch(setLastSync(new Date().toISOString()));
      
      // console.log('‚úÖ Synchronisation termin√©e avec succ√®s');
    } catch (error) {
      // console.error('‚ùå Erreur de synchronisation:', error);
      store.dispatch(addSyncError(error instanceof Error ? error.message : 'Erreur inconnue'));
    } finally {
      this.syncInProgress = false;
      store.dispatch(setSyncInProgress(false));
    }
  }

  // T√©l√©charger depuis le serveur
  private async pullFromServer() {
    try {
      const lastSync = await databaseService.getLastSyncTimestamp();
      
      // console.log('üì• R√©cup√©ration des mises √† jour depuis Firebase...');
      
      // V√©rifier que firebaseService est disponible
      if (!firebaseService) {
        console.log('‚ö†Ô∏è FirebaseService non disponible, synchronisation ignor√©e');
        return;
      }
      
      // 1. SYNCHRONISER LES CAT√âGORIES EN PREMIER (automatique)
      try {
        await syncCategoriesToLocal();
        console.log('‚úÖ [AUTO SYNC] Cat√©gories synchronis√©es automatiquement');
        
        // Rafra√Æchir le store Redux des cat√©gories apr√®s la synchronisation
        store.dispatch(fetchCategories());
      } catch (error) {
        console.error('‚ùå [AUTO SYNC] Erreur synchronisation automatique des cat√©gories:', error);
        // Continuer m√™me si la synchro des cat√©gories √©choue
      }
      
      // 2. R√©cup√©rer les mises √† jour depuis Firebase
      const updates = await firebaseService.getUpdatesSince(lastSync);

      // Appliquer les mises √† jour
      for (const update of updates) {
        await this.applyServerUpdate(update);
      }

      // console.log(`üì• ${updates.length} mises √† jour re√ßues de Firebase`);
    } catch (error) {
      // console.error('‚ùå Erreur pull:', error);
      throw error;
    }
  }

  // Envoyer vers le serveur
  private async pushToServer() {
    try {
      const pendingOperations = await databaseService.getPendingSyncOperations();
      store.dispatch(setPendingOperations(pendingOperations.length));
      
      if (pendingOperations.length === 0) {
        // console.log('üì§ Aucune op√©ration en attente');
        return;
      }

      // console.log(`üì§ ${pendingOperations.length} op√©rations en attente`);

      // Trier par priorit√© (1 = haute, 3 = basse)
      pendingOperations.sort((a, b) => a.priority - b.priority);

      // Traiter par batches
      const batches = this.createBatches(pendingOperations, this.config.batchSize);

      for (const batch of batches) {
        await this.processBatch(batch);
      }

      // console.log('üì§ Toutes les op√©rations ont √©t√© envoy√©es');
    } catch (error) {
      // console.error('‚ùå Erreur push:', error);
      throw error;
    }
  }

  // Cr√©er des batches d'op√©rations
  private createBatches<T>(items: T[], batchSize: number): T[][] {
    const batches: T[][] = [];
    for (let i = 0; i < items.length; i += batchSize) {
      batches.push(items.slice(i, i + batchSize));
    }
    return batches;
  }

  // Traiter un batch d'op√©rations
  private async processBatch(batch: SyncOperation[]) {
    for (const operation of batch) {
      try {
        await this.markOperationAsSyncing(operation.id);
        await this.sendOperationToServer(operation);
        await this.markOperationAsSynced(operation.id);
        
        // Mettre √† jour le store Redux
        this.updateStoreAfterSync(operation);
      } catch (error) {
        await this.handleSyncError(operation, error);
      }
    }
  }

  // Marquer une op√©ration comme en cours de synchronisation
  private async markOperationAsSyncing(operationId: string) {
    await databaseService.update('sync_queue', operationId, {
      status: 'syncing',
    });
  }

  // Marquer une op√©ration comme synchronis√©e
  private async markOperationAsSynced(operationId: string) {
    await databaseService.delete('sync_queue', operationId);
  }

  // Envoyer une op√©ration au serveur
  private async sendOperationToServer(operation: SyncOperation) {
    const { table_name, record_id, operation: op, data } = operation;
    const parsedData = data ? JSON.parse(data) : null;

    // V√©rifier que firebaseService est disponible
    if (!firebaseService) {
      console.log('‚ö†Ô∏è FirebaseService non disponible, op√©ration ignor√©e');
      return;
    }
    
    console.log('üîç [SYNC DEBUG] FirebaseService disponible:', !!firebaseService);
    console.log('üîç [SYNC DEBUG] M√©thode createProduct disponible:', typeof firebaseService.createProduct);

    try {
      console.log(`üì§ Envoi ${op} pour ${table_name}:${record_id}`);
      
      // Traiter selon le type d'op√©ration
      switch (op) {
        case 'create':
          console.log(`üîç [SYNC DEBUG] Op√©ration CREATE pour ${table_name}`);
          if (table_name === 'products') {
            console.log(`üîç [SYNC DEBUG] Cr√©ation produit avec donn√©es:`, parsedData);
            const firebaseId = await firebaseService.createProduct(parsedData);
            console.log(`‚úÖ Produit cr√©√© dans Firebase: ${firebaseId}`);
            // Mettre √† jour le statut local
            await databaseService.update('products', record_id, { 
              sync_status: 'synced',
              firebase_id: firebaseId 
            });
            console.log(`‚úÖ Statut local mis √† jour pour ${record_id}`);
          } else if (table_name === 'categories') {
            console.log(`üîç [SYNC DEBUG] Cr√©ation cat√©gorie avec donn√©es:`, parsedData);
            const firebaseId = await firebaseService.createCategory(parsedData);
            console.log(`‚úÖ Cat√©gorie cr√©√©e dans Firebase: ${firebaseId}`);
            // Mettre √† jour le statut local
            await databaseService.update('categories', record_id, { 
              sync_status: 'synced',
              firebase_id: firebaseId 
            });
            console.log(`‚úÖ Statut local mis √† jour pour ${record_id}`);
          } else if (table_name === 'stock') {
            console.log(`üîç [SYNC DEBUG] Cr√©ation stock avec donn√©es:`, parsedData);
            const firebaseId = await firebaseService.createStock(parsedData);
            console.log(`‚úÖ Stock cr√©√© dans Firebase: ${firebaseId}`);
            
            // IMPORTANT: Remplacer l'ID local par l'ID Firebase pour coh√©rence
            // 1. R√©cup√©rer les donn√©es compl√®tes du stock local
            const localStock = await databaseService.getById('stock', record_id);
            
            // 2. Supprimer l'ancien stock avec l'ID local
            await databaseService.delete('stock', record_id);
            console.log(`üóëÔ∏è [ID SYNC] Ancien stock local supprim√©: ${record_id}`);
            
            // 3. Cr√©er un nouveau stock avec l'ID Firebase
            const existing = await AsyncStorage.getItem('stock');
            const items = existing ? JSON.parse(existing) : [];
            items.push({
              ...localStock,
              id: firebaseId, // ID Firebase comme ID local
              firebase_id: firebaseId,
              sync_status: 'synced'
            });
            await AsyncStorage.setItem('stock', JSON.stringify(items));
            
            // 4. Invalider le cache
            databaseService.invalidateCache('stock');
            
            console.log(`‚úÖ [ID SYNC] Stock recr√©√© avec ID Firebase: ${firebaseId}`);
          } else if (table_name === 'sales') {
            console.log(`üîç [SYNC DEBUG] Cr√©ation vente avec donn√©es:`, parsedData);
            const firebaseId = await firebaseService.createSale(parsedData);
            console.log(`‚úÖ Vente cr√©√©e dans Firebase: ${firebaseId}`);
            // Mettre √† jour le statut local
            await databaseService.update('sales', record_id, { 
              sync_status: 'synced',
              firebase_id: firebaseId 
            });
            console.log(`‚úÖ Statut local mis √† jour pour ${record_id}`);
          } else if (table_name === 'customers') {
            console.log(`üîç [SYNC DEBUG] Cr√©ation client avec donn√©es:`, parsedData);
            const firebaseId = await firebaseService.createCustomer(parsedData);
            console.log(`‚úÖ Client cr√©√© dans Firebase: ${firebaseId}`);
            // Mettre √† jour le statut local
            await databaseService.update('customers', record_id, { 
              sync_status: 'synced',
              firebase_id: firebaseId 
            });
            console.log(`‚úÖ Statut local mis √† jour pour ${record_id} avec firebase_id: ${firebaseId}`);
          } else if (table_name === 'locations') {
            console.log(`üîç [SYNC DEBUG] Cr√©ation emplacement avec donn√©es:`, parsedData);
            const firebaseId = await firebaseService.createLocation(parsedData);
            console.log(`‚úÖ Emplacement cr√©√© dans Firebase: ${firebaseId}`);
            
            // IMPORTANT: Remplacer l'ID local par l'ID Firebase
            const localLocation = await databaseService.getById('locations', record_id);
            await databaseService.delete('locations', record_id);
            
            const existing = await AsyncStorage.getItem('locations');
            const items = existing ? JSON.parse(existing) : [];
            items.push({
              ...localLocation,
              id: firebaseId,
              firebase_id: firebaseId,
              sync_status: 'synced'
            });
            await AsyncStorage.setItem('locations', JSON.stringify(items));
            databaseService.invalidateCache('locations');
            
            console.log(`‚úÖ [ID SYNC] Emplacement recr√©√© avec ID Firebase: ${firebaseId}`);
          } else if (table_name === 'inventory') {
            console.log(`üîç [SYNC DEBUG] Cr√©ation inventaire avec donn√©es:`, parsedData);
            const firebaseId = await firebaseService.createInventory(parsedData);
            console.log(`‚úÖ Inventaire cr√©√© dans Firebase: ${firebaseId}`);
            
            // IMPORTANT: Remplacer l'ID local par l'ID Firebase
            const localInventory = await databaseService.getById('inventory', record_id);
            await databaseService.delete('inventory', record_id);
            
            const existing = await AsyncStorage.getItem('inventory');
            const items = existing ? JSON.parse(existing) : [];
            items.push({
              ...localInventory,
              id: firebaseId,
              firebase_id: firebaseId,
              sync_status: 'synced'
            });
            await AsyncStorage.setItem('inventory', JSON.stringify(items));
            databaseService.invalidateCache('inventory');
            
            console.log(`‚úÖ [ID SYNC] Inventaire recr√©√© avec ID Firebase: ${firebaseId}`);
          } else {
            console.log(`‚ö†Ô∏è [SYNC DEBUG] Table non support√©e pour CREATE: ${table_name}`);
          }
          break;
          
            case 'update':
              if (table_name === 'products') {
                // Utiliser l'utilitaire pour obtenir l'ID Firebase
                const firebaseId = await getFirebaseId(record_id);
                
                if (firebaseId) {
                  await firebaseService.updateProduct(firebaseId, parsedData);
                  console.log(`‚úÖ Produit mis √† jour dans Firebase: ${firebaseId}`);
                } else {
                  console.log(`‚ö†Ô∏è Pas de firebase_id trouv√© pour ${record_id}, tentative avec ID local`);
                  await firebaseService.updateProduct(record_id, parsedData);
                  console.log(`‚úÖ Produit mis √† jour dans Firebase: ${record_id}`);
                }
                await databaseService.update('products', record_id, { sync_status: 'synced' });
              } else if (table_name === 'categories') {
                // Utiliser l'utilitaire pour obtenir l'ID Firebase
                const firebaseId = await getFirebaseId(record_id);
                
                if (firebaseId) {
                  await firebaseService.updateCategory(firebaseId, parsedData);
                  console.log(`‚úÖ Cat√©gorie mise √† jour dans Firebase: ${firebaseId}`);
                } else {
                  console.log(`‚ö†Ô∏è Pas de firebase_id trouv√© pour ${record_id}, tentative avec ID local`);
                  await firebaseService.updateCategory(record_id, parsedData);
                  console.log(`‚úÖ Cat√©gorie mise √† jour dans Firebase: ${record_id}`);
                }
                await databaseService.update('categories', record_id, { sync_status: 'synced' });
            } else if (table_name === 'stock') {
              // Pour le stock, chercher par product_id au lieu de l'ID du stock
              console.log(`üîç [STOCK UPDATE] Recherche stock par product_id: ${parsedData.product_id}`);
              
              try {
                // Chercher le stock dans Firebase par product_id
                const stockInFirebase = await firebaseService.getStockByProduct(parsedData.product_id);
                
                if (stockInFirebase) {
                  // Mettre √† jour le stock existant
                  console.log(`‚úÖ [STOCK UPDATE] Stock trouv√© dans Firebase: ${stockInFirebase.id}`);
                  await firebaseService.updateStockByProductId(parsedData.product_id, parsedData);
                  console.log(`‚úÖ Stock mis √† jour dans Firebase pour product_id: ${parsedData.product_id}`);
                } else {
                  // Cr√©er le stock s'il n'existe pas
                  console.log(`‚ö†Ô∏è [STOCK UPDATE] Stock non trouv√©, cr√©ation...`);
                  const newStockId = await firebaseService.createStock(parsedData);
                  console.log(`‚úÖ Stock cr√©√© dans Firebase: ${newStockId}`);
                  // Sauvegarder le firebase_id localement
                  await databaseService.update('stock', record_id, { 
                    sync_status: 'synced',
                    firebase_id: newStockId 
                  });
                }
                await databaseService.update('stock', record_id, { sync_status: 'synced' });
              } catch (error) {
                // Ne pas afficher d'erreur si c'est le mode offline (comportement normal)
                if (error instanceof Error && !error.message.includes('Mode offline')) {
                  console.error(`‚ùå [STOCK UPDATE] Erreur:`, error);
                }
                throw error;
              }
            } else if (table_name === 'locations') {
              const firebaseId = await getFirebaseId(record_id);
              
              if (firebaseId) {
                await firebaseService.updateLocation(firebaseId, parsedData);
                console.log(`‚úÖ Emplacement mis √† jour dans Firebase: ${firebaseId}`);
              } else {
                await firebaseService.updateLocation(record_id, parsedData);
                console.log(`‚úÖ Emplacement mis √† jour dans Firebase: ${record_id}`);
              }
              await databaseService.update('locations', record_id, { sync_status: 'synced' });
            } else if (table_name === 'inventory') {
              const firebaseId = await getFirebaseId(record_id);
              
              if (firebaseId) {
                await firebaseService.updateInventory(firebaseId, parsedData);
                console.log(`‚úÖ Inventaire mis √† jour dans Firebase: ${firebaseId}`);
              } else {
                await firebaseService.updateInventory(record_id, parsedData);
                console.log(`‚úÖ Inventaire mis √† jour dans Firebase: ${record_id}`);
              }
              await databaseService.update('inventory', record_id, { sync_status: 'synced' });
            }
              break;
          
        case 'delete':
          if (table_name === 'products') {
            // Pour la suppression, v√©rifier si l'ID est un ID Firebase ou local
            if (isValidFirebaseId(record_id)) {
              // C'est un ID Firebase, suppression directe
              await firebaseService.deleteProduct(record_id);
              console.log(`‚úÖ Produit supprim√© de Firebase: ${record_id}`);
            } else {
              // C'est un ID local, chercher l'ID Firebase correspondant
              const firebaseId = await getFirebaseId(record_id);
              if (firebaseId) {
                await firebaseService.deleteProduct(firebaseId);
                console.log(`‚úÖ Produit supprim√© de Firebase avec ID local: ${record_id} -> ${firebaseId}`);
              } else {
                console.log(`‚ö†Ô∏è Aucun ID Firebase trouv√© pour ${record_id}, produit probablement cr√©√© en mode offline uniquement`);
              }
            }
          } else if (table_name === 'stock') {
            if (isValidFirebaseId(record_id)) {
              // C'est un ID Firebase, suppression directe
              await firebaseService.deleteStock(record_id);
              console.log(`‚úÖ Stock supprim√© de Firebase: ${record_id}`);
            } else {
              // C'est un ID local, chercher l'ID Firebase correspondant
              const firebaseId = await getFirebaseId(record_id);
              if (firebaseId) {
                await firebaseService.deleteStock(firebaseId);
                console.log(`‚úÖ Stock supprim√© de Firebase avec ID local: ${record_id} -> ${firebaseId}`);
              } else {
                console.log(`‚ö†Ô∏è Aucun ID Firebase trouv√© pour ${record_id}, stock probablement cr√©√© en mode offline uniquement`);
              }
            }
          } else if (table_name === 'categories') {
            // Pour la suppression, v√©rifier si l'ID est un ID Firebase ou local
            if (isValidFirebaseId(record_id)) {
              // C'est un ID Firebase, suppression directe
              await firebaseService.deleteCategory(record_id);
              console.log(`‚úÖ Cat√©gorie supprim√©e de Firebase: ${record_id}`);
            } else {
              // C'est un ID local, chercher l'ID Firebase correspondant
              const firebaseId = await getFirebaseId(record_id);
              if (firebaseId) {
                await firebaseService.deleteCategory(firebaseId);
                console.log(`‚úÖ Cat√©gorie supprim√©e de Firebase avec ID local: ${record_id} -> ${firebaseId}`);
              } else {
                console.log(`‚ö†Ô∏è Aucun ID Firebase trouv√© pour ${record_id}, cat√©gorie probablement cr√©√©e en mode offline uniquement`);
              }
            }
          } else if (table_name === 'stock') {
            // Pour la suppression, v√©rifier si l'ID est un ID Firebase ou local
            if (isValidFirebaseId(record_id)) {
              // C'est un ID Firebase, suppression directe
              await firebaseService.deleteStock(record_id);
              console.log(`‚úÖ Stock supprim√© de Firebase: ${record_id}`);
            } else {
              // C'est un ID local, chercher l'ID Firebase correspondant
              const firebaseId = await getFirebaseId(record_id);
              if (firebaseId) {
                await firebaseService.deleteStock(firebaseId);
                console.log(`‚úÖ Stock supprim√© de Firebase avec ID local: ${record_id} -> ${firebaseId}`);
              } else {
                console.log(`‚ö†Ô∏è Aucun ID Firebase trouv√© pour ${record_id}, stock probablement cr√©√© en mode offline uniquement`);
              }
            }
          } else if (table_name === 'customers') {
            // Pour la suppression, v√©rifier si l'ID est un ID Firebase ou local
            if (isValidFirebaseId(record_id)) {
              // C'est un ID Firebase, suppression directe
              await firebaseService.deleteCustomer(record_id);
              console.log(`‚úÖ Client supprim√© de Firebase: ${record_id}`);
            } else {
              // C'est un ID local, chercher l'ID Firebase correspondant
              const firebaseId = await getFirebaseId(record_id);
              if (firebaseId) {
                await firebaseService.deleteCustomer(firebaseId);
                console.log(`‚úÖ Client supprim√© de Firebase avec ID local: ${record_id} -> ${firebaseId}`);
                
                // Supprimer d√©finitivement le client local apr√®s suppression r√©ussie dans Firebase
                await databaseService.delete('customers', record_id);
                console.log(`üóëÔ∏è Client local supprim√© d√©finitivement: ${record_id}`);
              } else {
                console.log(`‚ö†Ô∏è Aucun ID Firebase trouv√© pour ${record_id}, client probablement cr√©√© en mode offline uniquement`);
                
                // Supprimer le client local m√™me s'il n'existe pas dans Firebase
                await databaseService.delete('customers', record_id);
                console.log(`üóëÔ∏è Client local supprim√© (n'existait pas dans Firebase): ${record_id}`);
              }
            }
          } else if (table_name === 'locations') {
            if (isValidFirebaseId(record_id)) {
              await firebaseService.deleteLocation(record_id);
              console.log(`‚úÖ Emplacement supprim√© de Firebase: ${record_id}`);
            } else {
              // Pour les suppressions, utiliser le firebase_id des donn√©es si disponible
              let firebaseId = null;
              if (parsedData && parsedData.firebase_id) {
                firebaseId = parsedData.firebase_id;
                console.log(`üîç [SYNC DEBUG] Utilisation firebase_id des donn√©es: ${firebaseId}`);
              } else {
                // Fallback: chercher l'ID Firebase (peut ne pas fonctionner si l'item a √©t√© supprim√© localement)
                firebaseId = await getFirebaseId(record_id);
              }
              
              if (firebaseId) {
                await firebaseService.deleteLocation(firebaseId);
                console.log(`‚úÖ Emplacement supprim√© de Firebase avec ID local: ${record_id} -> ${firebaseId}`);
              } else {
                console.log(`‚ö†Ô∏è Aucun ID Firebase trouv√© pour ${record_id}, emplacement probablement cr√©√© en mode offline uniquement`);
              }
            }
          } else if (table_name === 'inventory') {
            console.log(`üîç [SYNC DEBUG] Traitement suppression inventaire: ${record_id}`);
            console.log(`üîç [SYNC DEBUG] Donn√©es re√ßues:`, parsedData);
            
            if (isValidFirebaseId(record_id)) {
              console.log(`üîç [SYNC DEBUG] ID Firebase d√©tect√©, suppression directe: ${record_id}`);
              await firebaseService.deleteInventory(record_id);
              console.log(`‚úÖ Inventaire supprim√© de Firebase: ${record_id}`);
            } else {
              // Pour les suppressions, utiliser le firebase_id des donn√©es si disponible
              let firebaseId = null;
              if (parsedData && parsedData.firebase_id) {
                firebaseId = parsedData.firebase_id;
                console.log(`üîç [SYNC DEBUG] Utilisation firebase_id des donn√©es: ${firebaseId}`);
              } else {
                // Fallback: chercher l'ID Firebase (peut ne pas fonctionner si l'item a √©t√© supprim√© localement)
                console.log(`üîç [SYNC DEBUG] Recherche firebase_id pour ID local: ${record_id}`);
                firebaseId = await getFirebaseId(record_id);
                console.log(`üîç [SYNC DEBUG] firebase_id trouv√©: ${firebaseId}`);
              }
              
              if (firebaseId) {
                console.log(`üîç [SYNC DEBUG] Tentative suppression Firebase avec ID: ${firebaseId}`);
                await firebaseService.deleteInventory(firebaseId);
                console.log(`‚úÖ Inventaire supprim√© de Firebase avec ID local: ${record_id} -> ${firebaseId}`);
              } else {
                console.log(`‚ö†Ô∏è Aucun ID Firebase trouv√© pour ${record_id}, inventaire probablement cr√©√© en mode offline uniquement`);
              }
            }
          }
          break;
          
        default:
          console.log(`‚ö†Ô∏è Op√©ration non support√©e: ${op}`);
      }
      
    } catch (error) {
      // Masquer les erreurs de mode offline qui sont normales
      if (error instanceof Error && error.message.includes('Mode offline')) {
        console.log(`üì± Mode offline - op√©ration ${op} pour ${table_name}:${record_id} report√©e (normal)`);
      } else {
        // console.error(`‚ùå Erreur envoi op√©ration ${op} pour ${table_name}:${record_id}:`, error);
      }
      throw error; // Re-lancer pour que la gestion d'erreur parente fonctionne
    }
  }

  // Appliquer une mise √† jour du serveur
  private async applyServerUpdate(update: any) {
    const { table, operation, data } = update;

    switch (operation) {
      case 'create':
      case 'update':
        await databaseService.update(table, data.id, {
          ...data,
          sync_status: 'synced',
          sync_timestamp: new Date().toISOString(),
        });
        break;
      case 'delete':
        await databaseService.delete(table, data.id);
        break;
    }
  }

  // Mettre √† jour le store apr√®s synchronisation
  private updateStoreAfterSync(operation: SyncOperation) {
    const { table_name, record_id } = operation;
    
    // Cette m√©thode sera √©tendue pour mettre √† jour les diff√©rents slices
    // selon le type d'op√©ration et la table concern√©e
    console.log(`‚úÖ Op√©ration ${operation.operation} synchronis√©e pour ${table_name}:${record_id}`);
  }

  // Nettoyer les op√©rations en erreur (supprimer au lieu de r√©initialiser)
  async cleanErrorOperations(): Promise<void> {
    try {
      console.log('üßπ [CLEANUP] Nettoyage des op√©rations en erreur...');
      
      // R√©cup√©rer toutes les op√©rations en erreur
      const errorOperations = await databaseService.query(
        'SELECT * FROM sync_queue WHERE status = ?',
        ['error']
      ) as SyncOperation[];
      
      if (errorOperations.length === 0) {
        console.log('‚úÖ [CLEANUP] Aucune op√©ration en erreur √† nettoyer');
        return;
      }
      
      console.log(`üßπ [CLEANUP] ${errorOperations.length} op√©rations en erreur trouv√©es`);
      
      // Supprimer chaque op√©ration en erreur
      for (const operation of errorOperations) {
        await databaseService.delete('sync_queue', operation.id);
        console.log(`üóëÔ∏è [CLEANUP] Op√©ration ${operation.id} supprim√©e (${operation.table_name}:${operation.record_id})`);
      }
      
      console.log(`‚úÖ [CLEANUP] ${errorOperations.length} op√©rations nettoy√©es avec succ√®s`);
    } catch (error) {
      console.error('‚ùå [CLEANUP] Erreur lors du nettoyage des op√©rations:', error);
    }
  }

  // R√©initialiser les op√©rations en erreur lors du passage en mode online
  async resetErrorOperations(): Promise<void> {
    try {
      console.log('üîÑ [ONLINE] R√©initialisation des op√©rations en erreur...');
      
      // R√©cup√©rer toutes les op√©rations en erreur
      const errorOperations = await databaseService.query(
        'SELECT * FROM sync_queue WHERE status = ?',
        ['error']
      ) as SyncOperation[];
      
      if (errorOperations.length === 0) {
        console.log('‚úÖ [ONLINE] Aucune op√©ration en erreur √† r√©initialiser');
        return;
      }
      
      console.log(`üîÑ [ONLINE] ${errorOperations.length} op√©rations en erreur trouv√©es`);
      
      // V√©rifier si l'op√©ration est valide avant de la r√©initialiser
      for (const operation of errorOperations) {
        try {
          // V√©rifier si l'enregistrement existe encore localement
          const record = await databaseService.getById(operation.table_name, operation.record_id);
          
          if (!record) {
            // L'enregistrement n'existe plus, supprimer l'op√©ration
            await databaseService.delete('sync_queue', operation.id);
            console.log(`üóëÔ∏è [ONLINE] Op√©ration ${operation.id} supprim√©e (enregistrement introuvable)`);
            continue;
          }
          
          // L'enregistrement existe, r√©initialiser l'op√©ration
          await databaseService.update('sync_queue', operation.id, {
            status: 'pending',
            retry_count: 0,
            error_message: null,
          });
          console.log(`‚úÖ [ONLINE] Op√©ration ${operation.id} r√©initialis√©e (${operation.table_name}:${operation.record_id})`);
        } catch (err) {
          // En cas d'erreur, supprimer l'op√©ration
          await databaseService.delete('sync_queue', operation.id);
          console.log(`üóëÔ∏è [ONLINE] Op√©ration ${operation.id} supprim√©e (erreur: ${err})`);
        }
      }
      
      console.log(`‚úÖ [ONLINE] Op√©rations trait√©es avec succ√®s`);
    } catch (error) {
      console.error('‚ùå [ONLINE] Erreur lors de la r√©initialisation des op√©rations:', error);
    }
  }

  // G√©rer les erreurs de synchronisation
  private async handleSyncError(operation: SyncOperation, error: any) {
    const newRetryCount = operation.retry_count + 1;
    
    // Masquer les erreurs de mode offline qui sont normales
    const isOfflineError = error instanceof Error && error.message.includes('Mode offline');
    
    // V√©rifier si c'est une erreur de document introuvable
    const isNotFoundError = error instanceof Error && (
      error.message.includes('Item avec l\'id') ||
      error.message.includes('non trouv√©') ||
      error.message.includes('Document stock introuvable')
    );
    
    // V√©rifier si c'est une erreur de doublon
    const isDuplicateError = error instanceof Error && (
      error.message.includes('existe d√©j√† dans Firebase') ||
      error.message.includes('SKU') && error.message.includes('existe d√©j√†')
    );
    
    // Si le document n'existe pas, supprimer l'op√©ration imm√©diatement
    if (isNotFoundError) {
      await databaseService.delete('sync_queue', operation.id);
      console.log(`üóëÔ∏è Op√©ration ${operation.id} supprim√©e (document introuvable)`);
      return;
    }
    
    // Si c'est un doublon, supprimer l'op√©ration et marquer comme synchronis√©
    if (isDuplicateError) {
      await databaseService.delete('sync_queue', operation.id);
      console.log(`‚ö†Ô∏è Op√©ration ${operation.id} supprim√©e (doublon d√©tect√©): ${error.message}`);
      
      // Marquer le produit local comme synchronis√©
      if (operation.table_name === 'products') {
        await databaseService.update('products', operation.record_id, {
          sync_status: 'synced'
        });
        console.log(`‚úÖ Produit ${operation.record_id} marqu√© comme synchronis√© (doublon)`);
      }
      return;
    }
    
    if (newRetryCount >= this.config.maxRetries) {
      // Marquer comme erreur d√©finitive
      await databaseService.update('sync_queue', operation.id, {
        status: 'error',
        retry_count: newRetryCount,
        error_message: error.message || 'Erreur inconnue',
      });
      
      if (isOfflineError) {
        console.log(`üì± Mode offline - erreur d√©finitive pour l'op√©ration ${operation.id} (normal)`);
      } else {
        console.error(`‚ùå Erreur d√©finitive pour l'op√©ration ${operation.id}:`, error);
      }
    } else {
      // Programmer un nouveau retry
      await databaseService.update('sync_queue', operation.id, {
        status: 'pending',
        retry_count: newRetryCount,
        error_message: error.message || 'Erreur inconnue',
      });
      
      if (isOfflineError) {
        console.log(`üì± Mode offline - retry ${newRetryCount}/${this.config.maxRetries} pour l'op√©ration ${operation.id} (normal)`);
      } else {
        console.log(`‚è≥ Retry ${newRetryCount}/${this.config.maxRetries} pour l'op√©ration ${operation.id}`);
      }
      
      // Programmer le retry avec d√©lai
      setTimeout(() => {
        this.startSync();
      }, this.config.retryDelay);
    }
  }

  // Ajouter une op√©ration √† la queue de synchronisation
  async addToSyncQueue(
    tableName: string,
    recordId: string,
    operation: 'create' | 'update' | 'delete',
    data: any,
    priority: number = 1
  ) {
    try {
      const syncRecord = {
        table_name: tableName,
        record_id: recordId,
        operation,
        data: JSON.stringify(data),
        priority,
        status: 'pending',
        retry_count: 0,
        created_at: new Date().toISOString(),
      };

      await databaseService.insert('sync_queue', syncRecord);

      // Mettre √† jour le compteur d'op√©rations en attente
      const pendingOps = await databaseService.getPendingSyncOperations();
      store.dispatch(setPendingOperations(pendingOps.length));

      console.log(`üìù Op√©ration ${operation} ajout√©e √† la queue pour ${tableName}:${recordId}`);

      // D√©marrer la synchronisation si en ligne
      const state = store.getState();
      const networkState = state.network as any;
      if (networkState.isConnected && !this.syncInProgress) {
        this.startSync();
      }
    } catch (error) {
      console.error('‚ùå Erreur ajout √† la queue de sync:', error);
    }
  }

  // Obtenir le statut de synchronisation
  getSyncStatus() {
    const state = store.getState();
    const syncState = state.sync as any;
    const networkState = state.network as any;
    
    return {
      isOnline: networkState.isConnected,
      syncInProgress: syncState.syncInProgress,
      lastSync: syncState.lastSync,
      pendingOperations: syncState.pendingOperations,
      syncErrors: syncState.syncErrors,
    };
  }

  // Forcer une synchronisation imm√©diate
  async forceSync() {
    console.log('üîÑ Synchronisation forc√©e');
    
    // R√©initialiser les op√©rations en erreur avant de synchroniser
    await this.resetErrorOperations();
    
    await this.startSync();
  }

  // Nettoyer les ressources
  destroy() {
    if (this.syncInterval) {
      clearInterval(this.syncInterval);
      this.syncInterval = null;
    }
    this.isInitialized = false;
    console.log('üîÑ Service de synchronisation d√©truit');
  }
}

// Instance singleton
export const syncService = new SyncService();
