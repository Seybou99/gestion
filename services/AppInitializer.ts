import { store } from '../store';
import { setError, setLoading } from '../store/slices/authSlice';
import { syncOfflineArticles } from '../utils/syncOfflineData';
import { databaseService, seedTestData } from './DatabaseService';
import { firebaseService } from './FirebaseService';
import { networkService } from './NetworkService';
import { syncService } from './SyncService';

interface InitializationConfig {
  seedTestData: boolean;
  skipDatabaseInit: boolean;
  skipNetworkInit: boolean;
  skipSyncInit: boolean;
}

class AppInitializer {
  private config: InitializationConfig = {
    seedTestData: __DEV__, // G√©n√©rer des donn√©es de test en d√©veloppement
    skipDatabaseInit: false,
    skipNetworkInit: false,
    skipSyncInit: false,
  };

  private isInitialized = false;
  private initializationPromise: Promise<void> | null = null;

  constructor(config?: Partial<InitializationConfig>) {
    if (config) {
      this.config = { ...this.config, ...config };
    }
  }

  // Initialiser l'application
  async initialize(): Promise<void> {
    if (this.isInitialized) {
      console.log('‚úÖ Application d√©j√† initialis√©e');
      return;
    }

    if (this.initializationPromise) {
      console.log('‚è≥ Initialisation en cours...');
      return this.initializationPromise;
    }

    this.initializationPromise = this.performInitialization();
    return this.initializationPromise;
  }

  private async performInitialization(): Promise<void> {
    const startTime = Date.now();
    console.log('üöÄ D√©marrage de l\'initialisation de l\'application...');

    try {
      store.dispatch(setLoading(true));

      // 1. Initialiser Firebase
      if (!this.config.skipDatabaseInit) {
        console.log('üî• Initialisation de Firebase...');
        await this.initializeFirebase();
      }

      // 2. Initialiser le service r√©seau
      if (!this.config.skipNetworkInit) {
        console.log('üåê Initialisation du service r√©seau...');
        await this.initializeNetwork();
      }

      // 3. Initialiser le service de synchronisation
      if (!this.config.skipSyncInit) {
        console.log('üîÑ Initialisation du service de synchronisation...');
        await this.initializeSync();
      }

      // 4. G√©n√©rer des donn√©es de test si n√©cessaire
      if (this.config.seedTestData) {
        console.log('üå± G√©n√©ration des donn√©es de test...');
        await this.seedTestDataIfNeeded();
      }

      // 5. Synchroniser automatiquement les articles offline au d√©marrage
      await this.syncOfflineArticlesOnStartup();

      this.isInitialized = true;
      const duration = Date.now() - startTime;
      
      console.log(`‚úÖ Application initialis√©e avec succ√®s en ${duration}ms`);
      store.dispatch(setLoading(false));

    } catch (error) {
      console.error('‚ùå Erreur lors de l\'initialisation:', error);
      store.dispatch(setError(error instanceof Error ? error.message : 'Erreur d\'initialisation'));
      store.dispatch(setLoading(false));
      throw error;
    } finally {
      this.initializationPromise = null;
    }
  }

  // Initialiser Firebase
  private async initializeFirebase(): Promise<void> {
    try {
      await firebaseService.init();
      console.log('‚úÖ Firebase initialis√©');
    } catch (error) {
      console.error('‚ùå Erreur initialisation Firebase:', error);
      throw new Error('Impossible d\'initialiser Firebase');
    }
  }

  // Initialiser le service r√©seau
  private async initializeNetwork(): Promise<void> {
    try {
      await networkService.init();
      console.log('‚úÖ Service r√©seau initialis√©');
    } catch (error) {
      console.error('‚ùå Erreur initialisation service r√©seau:', error);
      throw new Error('Impossible d\'initialiser le service r√©seau');
    }
  }

  // Initialiser le service de synchronisation
  private async initializeSync(): Promise<void> {
    try {
      await syncService.init();
      console.log('‚úÖ Service de synchronisation initialis√©');
    } catch (error) {
      console.error('‚ùå Erreur initialisation service de synchronisation:', error);
      throw new Error('Impossible d\'initialiser le service de synchronisation');
    }
  }

  // G√©n√©rer des donn√©es de test si n√©cessaire
  private async seedTestDataIfNeeded(): Promise<void> {
    try {
      // V√©rifier si des donn√©es existent d√©j√†
      const existingProducts = await databaseService.getAll('products');
      
      if (existingProducts.length === 0) {
        await seedTestData();
        console.log('‚úÖ Donn√©es de test g√©n√©r√©es');
      } else {
        console.log('üìä Donn√©es existantes trouv√©es, pas de g√©n√©ration n√©cessaire');
      }
    } catch (error) {
      console.error('‚ùå Erreur g√©n√©ration donn√©es de test:', error);
      // Ne pas faire √©chouer l'initialisation pour les donn√©es de test
    }
  }

  // Synchroniser automatiquement les articles offline au d√©marrage
  private async syncOfflineArticlesOnStartup(): Promise<void> {
    try {
      console.log('üîÑ [STARTUP] Synchronisation automatique des articles offline...');
      
      // V√©rifier si on est connect√©
      const state = store.getState() as any;
      const isConnected = state.network?.isConnected;
      
      if (!isConnected) {
        console.log('üì± [STARTUP] Pas de connexion, synchronisation report√©e');
        return;
      }

      // Synchroniser les articles offline
      await syncOfflineArticles();
      
      // D√©clencher une synchronisation imm√©diate si il y a des op√©rations en attente
      const pendingOps = await databaseService.getAll('sync_queue');
      if (pendingOps.length > 0) {
        console.log(`üîÑ [STARTUP] ${pendingOps.length} op√©rations en attente, synchronisation imm√©diate...`);
        await syncService.forceSync();
      }
      
      console.log('‚úÖ [STARTUP] Synchronisation automatique termin√©e');
    } catch (error) {
      console.error('‚ùå [STARTUP] Erreur synchronisation automatique:', error);
      // Ne pas faire √©chouer l'initialisation pour la synchronisation
    }
  }

  // R√©initialiser l'application
  async reset(): Promise<void> {
    console.log('üîÑ R√©initialisation de l\'application...');
    
    try {
      // Nettoyer les services
      syncService.destroy();
      networkService.destroy();
      
      // R√©initialiser le store
      store.dispatch({ type: 'RESET' });
      
      this.isInitialized = false;
      this.initializationPromise = null;
      
      console.log('‚úÖ Application r√©initialis√©e');
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©initialisation:', error);
      throw error;
    }
  }

  // Obtenir le statut d'initialisation
  getInitializationStatus() {
    return {
      isInitialized: this.isInitialized,
      isInitializing: this.initializationPromise !== null,
      config: this.config,
    };
  }

  // V√©rifier si l'application est pr√™te
  isReady(): boolean {
    return this.isInitialized && !this.initializationPromise;
  }

  // Attendre que l'application soit initialis√©e
  async waitForInitialization(timeoutMs: number = 30000): Promise<boolean> {
    if (this.isInitialized) {
      return true;
    }

    if (this.initializationPromise) {
      try {
        await Promise.race([
          this.initializationPromise,
          new Promise((_, reject) => 
            setTimeout(() => reject(new Error('Timeout')), timeoutMs)
          )
        ]);
        return true;
      } catch (error) {
        return false;
      }
    }

    return false;
  }
}

// Instance singleton
export const appInitializer = new AppInitializer();

// Configuration par d√©faut pour diff√©rents environnements
export const createInitializer = (config?: Partial<InitializationConfig>) => {
  return new AppInitializer(config);
};

// Configuration pour les tests
export const createTestInitializer = () => {
  return new AppInitializer({
    seedTestData: false,
    skipDatabaseInit: false,
    skipNetworkInit: true,
    skipSyncInit: true,
  });
};

// Configuration pour le d√©veloppement
export const createDevInitializer = () => {
  return new AppInitializer({
    seedTestData: true,
    skipDatabaseInit: false,
    skipNetworkInit: false,
    skipSyncInit: false,
  });
};

// Configuration pour la production
export const createProdInitializer = () => {
  return new AppInitializer({
    seedTestData: false,
    skipDatabaseInit: false,
    skipNetworkInit: false,
    skipSyncInit: false,
  });
};
