// Script de test simple pour v√©rifier l'architecture
const { databaseService, seedTestData } = require('./services/DatabaseService.ts');

async function testApp() {
  try {
    console.log('üß™ Test de l\'architecture de l\'application...');
    
    // 1. Initialiser la base de donn√©es
    console.log('1Ô∏è‚É£ Initialisation de la base de donn√©es...');
    await databaseService.init();
    
    // 2. G√©n√©rer des donn√©es de test
    console.log('2Ô∏è‚É£ G√©n√©ration des donn√©es de test...');
    await seedTestData();
    
    // 3. R√©cup√©rer les produits
    console.log('3Ô∏è‚É£ R√©cup√©ration des produits...');
    const products = await databaseService.getAll('products');
    console.log(`‚úÖ ${products.length} produits trouv√©s:`, products.map(p => p.name));
    
    // 4. R√©cup√©rer les produits avec stock
    console.log('4Ô∏è‚É£ R√©cup√©ration des produits avec stock...');
    const productsWithStock = await databaseService.getProductsWithStock();
    console.log(`‚úÖ ${productsWithStock.length} produits avec stock:`, 
      productsWithStock.map(p => `${p.name} (${p.quantity_current} en stock)`));
    
    // 5. Test de recherche
    console.log('5Ô∏è‚É£ Test de recherche...');
    const searchResults = await databaseService.query('SELECT * FROM products WHERE name LIKE ?', ['%iPhone%']);
    console.log(`‚úÖ Recherche iPhone: ${searchResults.length} r√©sultats`);
    
    console.log('üéâ Tous les tests sont pass√©s avec succ√®s !');
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error);
  }
}

// Ex√©cuter le test si le script est appel√© directement
if (require.main === module) {
  testApp();
}

module.exports = { testApp };
